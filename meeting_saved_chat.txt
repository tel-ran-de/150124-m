09:52:47 From Starta Institute 36 to Everyone:
	String s1 = "Java";
	        String s2 = "Java";
	        String s3 = new String("Java");
	
	        System.out.println(s1 == s2);
	        System.out.println(s1 == s3);
	        System.out.println(s2 == s3);
	
	        System.out.println(Objects.equals(s1, s2));
	        System.out.println(Objects.equals(s1,s3));
	        System.out.println(Objects.equals(s2,s3));
10:03:00 From Starta Institute 36 to Everyone:
	Создайте StringBuilder объекты используя все предоставленные конструкторы
	Используя метод append добавьте к объекту, который создан при помощи конструктора без параметров, строку “StartaUniversity”
	Распечатайте все объекты на консоле
	Примените метод reverse() к любому созданному объекту
	Распечатайте объект на консоле
10:09:24 From Ramiz Alasgarov to Starta Institute 36(Direct Message):
	StringBuilder stringBuilder = new StringBuilder("ramiz");	        StringBuilder stringBuilder1 = new StringBuilder(3);	        stringBuilder.append(" StartaUniversity");	        stringBuilder.reverse();	        System.out.println(stringBuilder);
10:10:58 From Starta Institute 36 to Ramiz Alasgarov(Direct Message):
	/        StringBuilder()
	//        Создает экземпляр без символов и начальной емкостью 16 символов.
	//                StringBuilder(int capacity)
	//        Создает экземпляр без символов и начальной емкости, заданной аргументом capacity.
	//        StringBuilder(CharSequence seq)
	//        Создает экземпляр, содержащий те же символы, что и указанный CharSequence.
	//                StringBuilder(String str)
	//        Создает экземпляр, инициализированный содержимым указанной строки.
10:11:51 From Starta Institute 36 to Everyone:
	/        StringBuilder()
	//        Создает экземпляр без символов и начальной емкостью 16 символов.
	//                StringBuilder(int capacity)
	//        Создает экземпляр без символов и начальной емкости, заданной аргументом capacity.
	//        StringBuilder(CharSequence seq)
	//        Создает экземпляр, содержащий те же символы, что и указанный CharSequence.
	//                StringBuilder(String str)
	//        Создает экземпляр, инициализированный содержимым указанной строки.
10:13:23 From Roman Fedyniak to Everyone:
	String.toCharArray()
10:13:31 From Roman Fedyniak to Everyone:
	МЫ ПРОХОДИЛИ ЭТОТ МЕТОД?
10:13:35 From Roman Fedyniak to Everyone:
	ВСПОМНИТ КТО ТО7
10:13:46 From Roman Fedyniak to Everyone:
	они похожи с этим методом?
10:13:55 From Roman Fedyniak to Everyone:
	StringBuilder
10:36:12 From Starta Institute 36 to Everyone:
	StringBuilder sb1 = new StringBuilder();
	        StringBuilder sb2 = new StringBuilder(25);
	
	        sb1.append("HelloHelloHelloHello");
	        sb2.append("HelloHelloHelloHelloHelloHello");
	//        sb2.append("Java");
	//        sb2.append("2025");
	//        sb2.append("!!!");
	
	        System.out.println(sb1.capacity());
	        System.out.println(sb2.capacity());
	        System.out.println(sb1.length());
	        System.out.println(sb2.length());
	        System.out.println(sb1);
	        System.out.println(sb2);
10:56:51 From Starta Institute 36 to Everyone:
	append() - метод добавляет строковое представление к последовательности.
	insert() - метод вставляет строковое представление в эту последовательность.
	replace(int start, int end, String str) - метод заменяет символы в подстроке этой последовательности символами в указанной строке String.
	int capacity() - метод возвращает текущую емкость.
	delete(int start, int end) - метод удаляет символы в подстроке этой последовательности.
	int indexOf() - метод возвращает индекс в этой строке первого вхождения указанной подстроки.
	int length() - метод возвращает длину (количество символов).
	reverse() - метод приводит к замене этой последовательности символов обратной последовательностью.
	substring() - метод возвращает новый объект String, содержащий подпоследовательность символов, содержащихся в данный момент в этой последовательности символов.
	toString() - метод возвращает строку, представляющую данные в этой последовательности.
11:06:45 From Starta Institute 36 to Everyone:
	An empty StringBuffer class contains the default 16 character capacity. If the number of the character increases from its current capacity, it increases the capacity by (oldcapacity*2)+2.
11:11:07 From Starta Institute 36 to Everyone:
	https://www.baeldung.com/java-strings-maximum-length
11:38:12 From Starta Institute 36 to Everyone:
	public class Worker {
	    private String name;
	    private int age;
	    private int id;
	    private double salary;
	    private static final int DEFAULT_ID = 100;
	
	    public Worker() {
	        this.id += DEFAULT_ID;
	    }
11:38:21 From Starta Institute 36 to Everyone:
	public Worker(String name, int age, double salary) {
	        this.name = name;
	        if (age < 18 || age > 65) {
	            System.out.println("ERROR!!! Incorrect age!");
	        } else {
	            this.age = age;
	        }
	        this.id += DEFAULT_ID;
	        this.salary = salary;
	    }
	
	    public void setName(String name) {
	        this.name = name;
	    }
11:38:28 From Starta Institute 36 to Everyone:
	public void setAge(int age) {
	        if (age < 18 || age > 65) {
	            System.out.println("ERROR!!! Incorrect age!");
	        } else {
	            this.age = age;
	        }
	    }
	
	    public void setSalary(double salary) {
	        this.salary = salary;
	    }
12:12:54 From Starta Institute 36 to Everyone:
	Worker worker = new Worker(20);
	        worker.setName("Aramis");
	        worker.setAge(22);
	//        System.out.println(worker.getName() + " " + worker.getAge() + " " + worker.getSalary());
	//        worker.printInfo();
	        System.out.println(worker.toString());
	        System.out.println(worker.getClass());
